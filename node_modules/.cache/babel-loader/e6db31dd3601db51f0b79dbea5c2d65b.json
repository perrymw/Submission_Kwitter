{"ast":null,"code":"import { domain, handleJsonResponse } from \"./constants\"; // action types\n\nimport { store } from '../index';\nexport var LIKE = \"LIKE\";\nexport var LIKE_SUCCESS = \"LIKE_SUCCESS\";\nexport var LIKE_FAIL = \"LIKE_FAIL\";\nexport var UNLIKE = \"UNLIKE\";\nexport var UNLIKE_SUCCESS = \"UNLIKE_SUCCESS\";\nexport var UNLIKE_FAIL = \"UNLIKE_FAIL\";\nvar url = domain + \"/likes\"; // action creators\n\nvar like = function like(likeData) {\n  return function (dispatch) {\n    //likeData is an object {messageId:messageId}\n    var token = store.getState().auth.login.token;\n    dispatch({\n      type: LIKE\n    });\n    return fetch(url, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \".concat(token),\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify({\n        messageId: likeData.id\n      })\n    }).then(handleJsonResponse).then(function (result) {\n      return dispatch({\n        type: LIKE_SUCCESS,\n        payload: result\n      });\n    }).catch(function (err) {\n      return Promise.reject(dispatch({\n        type: LIKE_FAIL,\n        payload: err.message\n      }));\n    });\n  };\n};\n\nvar unlike = function unlike(likeData) {\n  return function (dispatch) {\n    //likeData is an object {id:likeId} likeids have to be retrieved from a message object\n    dispatch({\n      type: UNLIKE\n    });\n    return fetch(url + \"/\".concat(likeData.id), {\n      method: \"DELETE\",\n      headers: {\n        Authorization: \"Bearer \".concat(likeData.token)\n      }\n    }).then(handleJsonResponse).then(function (result) {\n      return dispatch({\n        type: UNLIKE_SUCCESS,\n        payload: result //OK\n\n      });\n    }).catch(function (err) {\n      return Promise.reject(dispatch({\n        type: UNLIKE_FAIL,\n        payload: err.message\n      }));\n    });\n  };\n};\n\nexport var likePost = function likePost(likeData) {\n  return function (dispatch) {\n    return dispatch(like(likeData));\n  };\n};\nexport var unlikePost = function unlikePost(likeData) {\n  return function (dispatch) {\n    return dispatch(unlike(likeData));\n  };\n};","map":{"version":3,"sources":["/Users/work/Documents/Second Quarter/SubmissionKwitter/src/actions/likes.js"],"names":["domain","handleJsonResponse","store","LIKE","LIKE_SUCCESS","LIKE_FAIL","UNLIKE","UNLIKE_SUCCESS","UNLIKE_FAIL","url","like","likeData","dispatch","token","getState","auth","login","type","fetch","method","headers","Authorization","Accept","body","JSON","stringify","messageId","id","then","result","payload","catch","err","Promise","reject","message","unlike","likePost","unlikePost"],"mappings":"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","sourcesContent":["import { domain, handleJsonResponse } from \"./constants\";\n\n// action types\nimport { store } from '../index'\n\nexport const LIKE = \"LIKE\";\nexport const LIKE_SUCCESS = \"LIKE_SUCCESS\";\nexport const LIKE_FAIL = \"LIKE_FAIL\";\nexport const UNLIKE = \"UNLIKE\";\nexport const UNLIKE_SUCCESS = \"UNLIKE_SUCCESS\";\nexport const UNLIKE_FAIL = \"UNLIKE_FAIL\";\n\n\n\nconst url = domain + \"/likes\";\n\n// action creators\nconst like = likeData => dispatch => {\n  //likeData is an object {messageId:messageId}\n  const token = store.getState().auth.login.token\n  dispatch({\n    type: LIKE\n  });\n  return fetch(url, {\n    method: \"POST\",\n    headers: {\n      Authorization: `Bearer ${token}`,\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\"\n    },\n    body: JSON.stringify({messageId:likeData.id})\n  })\n    .then(handleJsonResponse)\n    .then(result => {\n      return dispatch({\n        type: LIKE_SUCCESS,\n        payload: result\n      });\n    })\n    .catch(err => {\n      return Promise.reject(\n        dispatch({ type: LIKE_FAIL, payload: err.message })\n      );\n    });\n};\n\nconst unlike = likeData => dispatch => {\n  //likeData is an object {id:likeId} likeids have to be retrieved from a message object\n  dispatch({\n    type: UNLIKE\n  });\n\n  return fetch(url +`/${likeData.id}`, {\n    method: \"DELETE\",\n    headers: {\n      Authorization: `Bearer ${likeData.token}`\n    }\n  })\n    .then(handleJsonResponse)\n    .then(result => {\n      return dispatch({\n        type: UNLIKE_SUCCESS,\n        payload: result //OK\n      });\n    })\n    .catch(err => {\n      return Promise.reject(\n        dispatch({ type: UNLIKE_FAIL, payload: err.message })\n      );\n    });\n};\n\nexport const likePost = likeData => dispatch => {\n  return dispatch(like(likeData))\n};\n\nexport const unlikePost = likeData => dispatch => {\n  return dispatch(unlike(likeData))\n};"]},"metadata":{},"sourceType":"module"}